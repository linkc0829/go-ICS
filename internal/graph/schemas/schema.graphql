scalar Time

# Types
type User{
  id: ID!
  email: String!
  userId: String!
  nickName: String
  createdAt: Time!
  "granted permission to friends to view portfolio"
  friends: [User]	  
  "permission to view followers portfolio"
  followers: [User]	    

}

"List current or historical portfolio"
type Portfolio{
	total: Int!
	income: [Income]!
	cost: [Costs]!
}

enum Category{
  INVESTMENT
  SALORY
  OTHERS
  DAILY
  LEARNING
  CHARITY
}


type Income{
  id: ID!
  owner: User!
  amount: Int!
  occurDate: Time!
  category: Category!
  description: String
  vote: [User]
}

type Cost{
  id: ID!
  owner: User!
  amount: Int!
  occurDate: Time!
  category: Category!
  description: String
  vote: [User]
}

# Input Types
input UserInput {
  email: String
  userId: String
  nickName: String
}

input IncomeInput{
  amount: Int
  date: Time
  category: Category
  description: String
}

input CostInput{
  amount: Int
  date: Time
  category: Category
  description: String
}

# Define mutations here
type Mutation {
  
  createUser(input: UserInput!): User!
  updateUser(id: ID!, input: UserInput!): User!
  deleteUser(id: ID!): Boolean!

  createIncome(input: IncomeInput!): Income!
  updateIncome(id: ID!, input: IncomeInput!): Income!
  deleteIncome(id: ID!): Boolean!

  createCost(input: CostInput!): Cost!
  updateCost(id: ID!, input: CostInput!): Cost!
  deleteCost(id: ID!): Boolean!
  
  "For current user to operate"
  addFriend(id: ID!): User
  addFollower(id: ID!): User
  likeCost(id: ID!): Int!
  likeIncome(id: ID!): Int!

}

# Define queries here
type Query {
  "query current user portfolio"
  me: User!
  myPortfolio: Portfolio!
  myHistory(range: Int!): Portfolio!
  myFriends: [User]!
  myFollowers: [User]!
  
  "query followers' portfolio"
  getUser(id: ID!): User!
  getUserPortfolio(id: ID!): Portfolio!
  getUserHistory(id: ID!, range: Int!): Portfolio!
  
}
# Types
type User {
  id: ID!
  email: String!
  userId: String
  name: String
  nickName: String
  createdAt: Time!
  token: String
  friends: [User]
  incomes: [income]
  cost: [cost]
  lastQuery: Time!
}

# List Types
type Users{
  count: int
  list: [User!]!
}

type Incomes{
  total: int!
  list: [Income!]
}

type Costs{
  total: int!
  list: [Cost!]
}

enum Category{
  """used both in income and cost"""
  INVESTMENT
  SALORY
  """used both in income and cost"""
  OTHERS

  DAILY
  LEARNING
  CHARITY
}


type Income{
  id: ID!
  number: int!
  date: Time!
  category: Category!
  description: String
  vote: [User!]
}

type Cost{
  id: ID!
  number: int!
  date: Time!
  category: Category!
  description: String
  vote: [User!]
}

enum Source{
  INCOME
  COST
}

type History{
  id: ID!
  number: int!
  date: Time!
  category: Category!
  description: String
  source: Source!
}

# Input Types
input UserInput {
  email: String
  userId: String
  name: String
  nickName: String
}

input IncomeInput{
  number: int
  date: Time
  category: String
  description: String
}

input CostInput{
  number: int
  date: Time
  category: String
  description: String
}

# Define mutations here
type Mutation {
  createUser(input: UserInput!): User!
  updateUser(id: ID!, input: UserInput!): User!
  deleteUser(id: ID!): Boolean!

  createIncome(input: IncomeInput!): Income!
  updateIncome(id: ID!, input: IncomeInput!): Income!
  deleteIncome(id: ID!): Boolean!

  createCost(input: CostInput!): Cost!
  updateCost(id: ID!, input: CostInput!): Cost!
  deleteCost(id: ID!): Boolean!

}

# Define queries here
type Query {
  users(id: ID): Users!
  incomes(id: ID): Incomes!
  costs(id: ID): Costs!
  history(id:ID): History!
}
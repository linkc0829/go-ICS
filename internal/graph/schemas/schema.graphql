scalar Time

# Types
type User {
  id: ID!
  email: String!
  userId: String!
  nickName: String
  createdAt: Time!
  token: String
  friends: Users!	"granted permission to friends to view portfolio"
  followers: Users!	"permission to view followers' portfolio"
  lastQuery: Time!
}

# List Types
type Users{
  count: Int
  list: [User]
}

"List current or historical protfolio"
type Protfolio{
	total: Int!
	income: Incomes!
	cost: Costs!
}

type Incomes{
  total: Int!
  list: [Income]
}

type Costs{
  total: Int!
  list: [Cost]
}

enum Category{
  INVESTMENT
  SALORY
  OTHERS

  DAILY
  LEARNING
  CHARITY
}


type Income{
  id: ID!
  author: User!
  number: Int!
  date: Time!
  category: Category!
  description: String
  vote: Users!
}

type Cost{
  id: ID!
  author: User!
  number: Int!
  date: Time!
  category: Category!
  description: String
  vote: Users!
}

# Input Types
input UserInput {
  email: String
  userId: String
  name: String
  nickName: String
}

input IncomeInput{
  number: Int
  date: Time
  category: String
  description: String
}

input CostInput{
  number: Int
  date: Time
  category: String
  description: String
}

# Define mutations here
type Mutation {
  
  createUser(input: UserInput!): User!
  deleteUser(id: ID!): Boolean!

  createIncome(input: IncomeInput!): Income!
  updateIncome(id: ID!, input: IncomeInput!): Income!
  deleteIncome(id: ID!): Boolean!

  createCost(input: CostInput!): Cost!
  updateCost(id: ID!, input: CostInput!): Cost!
  deleteCost(id: ID!): Boolean!
  
  addFriends(userId: String!): User
  likeCost(id: ID!): Int!
  likeIncome(id: ID!): Int!

}

# Define queries here
type Query {
  "query current user portfolio"
  me: User!
  myPortfolio: Protfolio!
  myHistory(range: Int!): Protfolio!
  myFriends: Users!
  myFollowers: Users!
  
  "query followers' portfolio"
  getUser(userId: String!): User!
  getPortfolio(userId: String!): Protfolio!
  getHistory(userId: String!, range: Int!): Protfolio!
  
}
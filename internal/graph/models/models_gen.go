// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

// List current or historical portfolio
type Portfolio interface {
	IsPortfolio()
}

type Cost struct {
	ID          string       `json:"id"`
	Owner       *User        `json:"owner"`
	Amount      int          `json:"amount"`
	OccurDate   time.Time    `json:"occurDate"`
	Category    CostCategory `json:"category"`
	Description *string      `json:"description"`
	Vote        []*User      `json:"vote"`
}

func (Cost) IsPortfolio() {}

type CreateCostInput struct {
	Amount      int          `json:"amount"`
	OccurDate   time.Time    `json:"occurDate"`
	Category    CostCategory `json:"category"`
	Description *string      `json:"description"`
}

type CreateIncomeInput struct {
	Amount      int            `json:"amount"`
	OccurDate   time.Time      `json:"occurDate"`
	Category    IncomeCategory `json:"category"`
	Description *string        `json:"description"`
}

type CreateUserInput struct {
	Email    string  `json:"email"`
	UserID   string  `json:"userId"`
	NickName *string `json:"nickName"`
}

type Income struct {
	ID          string         `json:"id"`
	Owner       *User          `json:"owner"`
	Amount      int            `json:"amount"`
	OccurDate   time.Time      `json:"occurDate"`
	Category    IncomeCategory `json:"category"`
	Description *string        `json:"description"`
	Vote        []*User        `json:"vote"`
}

func (Income) IsPortfolio() {}

type UpdateCostInput struct {
	Amount      *int          `json:"amount"`
	OccurDate   *time.Time    `json:"occurDate"`
	Category    *CostCategory `json:"category"`
	Description *string       `json:"description"`
}

type UpdateIncomeInput struct {
	Amount      *int            `json:"amount"`
	OccurDate   *time.Time      `json:"occurDate"`
	Category    *IncomeCategory `json:"category"`
	Description *string         `json:"description"`
}

type UpdateUserInput struct {
	Email    *string `json:"email"`
	UserID   *string `json:"userId"`
	NickName *string `json:"nickName"`
}

type User struct {
	ID        string    `json:"id"`
	Email     string    `json:"email"`
	UserID    string    `json:"userId"`
	NickName  *string   `json:"nickName"`
	CreatedAt time.Time `json:"createdAt"`
	// granted permission to friends to view portfolio
	Friends []*User `json:"friends"`
	// permission to view followers portfolio
	Followers []*User `json:"followers"`
}

type CostCategory string

const (
	CostCategoryInvestment CostCategory = "INVESTMENT"
	CostCategoryDaily      CostCategory = "DAILY"
	CostCategoryLearning   CostCategory = "LEARNING"
	CostCategoryCharity    CostCategory = "CHARITY"
	CostCategoryOthers     CostCategory = "OTHERS"
)

var AllCostCategory = []CostCategory{
	CostCategoryInvestment,
	CostCategoryDaily,
	CostCategoryLearning,
	CostCategoryCharity,
	CostCategoryOthers,
}

func (e CostCategory) IsValid() bool {
	switch e {
	case CostCategoryInvestment, CostCategoryDaily, CostCategoryLearning, CostCategoryCharity, CostCategoryOthers:
		return true
	}
	return false
}

func (e CostCategory) String() string {
	return string(e)
}

func (e *CostCategory) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CostCategory(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CostCategory", str)
	}
	return nil
}

func (e CostCategory) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type IncomeCategory string

const (
	IncomeCategoryInvestment IncomeCategory = "INVESTMENT"
	IncomeCategoryParttime   IncomeCategory = "PARTTIME"
	IncomeCategorySalory     IncomeCategory = "SALORY"
	IncomeCategoryOthers     IncomeCategory = "OTHERS"
)

var AllIncomeCategory = []IncomeCategory{
	IncomeCategoryInvestment,
	IncomeCategoryParttime,
	IncomeCategorySalory,
	IncomeCategoryOthers,
}

func (e IncomeCategory) IsValid() bool {
	switch e {
	case IncomeCategoryInvestment, IncomeCategoryParttime, IncomeCategorySalory, IncomeCategoryOthers:
		return true
	}
	return false
}

func (e IncomeCategory) String() string {
	return string(e)
}

func (e *IncomeCategory) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = IncomeCategory(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid IncomeCategory", str)
	}
	return nil
}

func (e IncomeCategory) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
